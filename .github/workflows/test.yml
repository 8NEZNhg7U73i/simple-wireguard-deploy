name: CI

on:
  push:
    branches: [master]

env:
  SSH_ACTIONS: false
  moon: false
  auto_wireguard: false
  auto_test: true
  all_test: false
  remove_all_package: false

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: list root file system
        continue-on-error: true
        if: env.all_test == 'true'
        run: |
          sudo -E du -x / 2>>/dev/null 1>>du.txt

      - name: list installed apt package and get package detail
        continue-on-error: true
        run: |
          #for i in $(sudo -E apt list 2>/dev/null | grep -e "installed" | awk -F '/' '{print $1}'); do sudo -E echo $i >>list.txt; done
          #for i in $(cat list.txt); do echo $i,$(echo $i| grep -o "-" | grep -c "-") >>list_mod.txt; done
          sudo bash 1.sh

      - name: get apt-cache show package
        if: env.test == 'true'
        run: |
          mkdir show
          mkdir showpkg
          mkdir rdepends
          mkdir depends
          for i in $(cat list.txt); do sudo -E apt-cache show $i 2>>/dev/null >>./show/$i.txt ;done        
          for i in $(cat list.txt); do sudo -E apt-cache showpkg $i 2>>/dev/null >>./showpkg/$i.txt ;done
          for i in $(cat list.txt); do sudo -E apt-cache rdepends $i 2>>/dev/null >>./rdepends/$i.txt ;done
          for i in $(cat list.txt); do sudo -E apt-cache depends $i 2>>/dev/null >>./depends/$i.txt ;done

      - name: remove apt package
        continue-on-error: true
        if: env.remove_all_package == 'true'
        run: |
          sudo bash 2.sh

      - name: remove docker images
        if: env.auto_test == 'true'
        run: sudo docker rmi -f $(docker images -a -q)

      - name: remove *ghc* *azure* *google* *firefox* *dotnet* *hvm* *snapd* *llvm* *moby* *php*
        if: env.auto_test == 'true'
        run: sudo apt-get purge -y *ghc* *azure* *google* *firefox* *dotnet* *hvm* *snapd* *llvm* *moby* *php*

      - name: remove /usr/local/lib/android
        if: env.auto_test == 'true'
        run: sudo rm -rf /usr/local/lib/android

      - name: remove /usr/share/dotnet
        if: env.auto_test == 'true'
        run: sudo rm -rf /usr/share/dotnet

      - name: remove /opt/hostedtoolcache
        if: env.auto_test == 'true'
        run: sudo rm -rf /opt/hostedtoolcache

      - name: remove /usr/local/.ghcup
        if: env.auto_test == 'true'
        run: sudo rm -rf /usr/local/.ghcup

      - name: remove /usr/share/swift
        if: env.auto_test == 'true'
        run: sudo rm -rf /usr/share/swift

      - name: remove /home/linuxbrew
        if: env.auto_test == 'true'
        run: sudo rm -rf /home/linuxbrew

      - name: remove /usr/local/graalvm
        if: env.auto_test == 'true'
        run: sudo rm -rf /usr/local/graalvm

      - name: remove /usr/local/lib/node_modules
        if: env.auto_test == 'true'
        run: sudo rm -rf /usr/local/lib/node_modules

      - name: remove /opt/pipx/venvs
        if: env.auto_test =='true'
        run: sudo rm -rf /opt/pipx/venvs

      - name: remove /usr/share/rust
        if: env.auto_test == 'true'
        run: sudo rm -rf /usr/share/rust

      - name: Install wireguard
        run: sudo -E apt-get install wireguard openresolv

      - name: Install zerotier one
        run: curl -s https://install.zerotier.com | sudo bash

      - name: join network Id
        run: sudo zerotier-cli join ${{ secrets.NETWORK_ID }}

      - name: orbit moon
        if: env.moon == 'true'
        run: sudo zerotier-cli orbit ${{ secrets.MOON_ID }} ${{ secrets.MOON_ID }}

      - name: Update system
        if: env.update_system == 'true'
        run: |
          sudo -E apt update
          sudo -E apt full-upgrade
          sudo -E apt-get install lrzsz

      - name: Create wireguard tunnel configuration
        run: |
          sed -i -e "s@{{WIREGUARD_PRIVATE_KEY}}@${{ secrets.WIREGUARD_PRIVATE_KEY }}@" $GITHUB_WORKSPACE/tunnel.conf
          sed -i -e "s@{{WIREGUARD_SERVER_PUBLIC_KEY}}@${{ secrets.WIREGUARD_SERVER_PUBLIC_KEY }}@" $GITHUB_WORKSPACE/tunnel.conf
          #sed -i -e "s@{{WIREGUARD_PRESHARED_KEY}}@${{ secrets.WIREGUARD_PRESHARED_KEY }}@" $GITHUB_WORKSPACE/tunnel.conf
          sed -i -e "s@{{WIREGUARD_SERVER_ENDPOINT}}@${{ secrets.WIREGUARD_SERVER_ENDPOINT }}@" $GITHUB_WORKSPACE/tunnel.conf
          sed -i -e "s@{{WIREGUARD_ADDRESS}}@${{ secrets.WIREGUARD_ADDRESS }}@" $GITHUB_WORKSPACE/tunnel.conf
          sed -i -e "s@{{WIREGUARD_ALLOWEDIPS}}@${{ secrets.WIREGUARD_ALLOWEDIPS }}@" $GITHUB_WORKSPACE/tunnel.conf
          sudo cp $GITHUB_WORKSPACE/tunnel.conf /etc/wireguard/

      - name: Connect wireguard
        run: |
          wg-quick up tunnel
          #wg-quick down tunnel

      - name: wireguard automate
        if: env.auto_wireguard == 'true'
        run: |
          echo dmesg
          sudo systemctl enable wg-quick@tunnel

      - name: check /root/.ssh directory
        run: |
          if [ ! /root  ]; then sudo mkdir /root; fi
          if [ ! /root/.ssh ]; then sudo mkdir /root/.ssh; fi

      - name: sshd public add and fix permission
        run: |
          echo ${{ secrets.SSH_PUBLIC_KEY }} | sudo tee -a /root/.ssh/authorized_keys
          sudo chmod 0600 /root/.ssh/authorized_keys

      - name: Fixup home directory permissions
        run: |
          sudo chown runner:runner /home/runner
          sudo chmod o-rwx -R /home/runner
          sudo chmod g-rwx -R /home/runner

      - name: Fixup root directory permissions
        run: |
          sudo chown root:root /root
          sudo chmod o-rwx -R /root
          sudo chmod g-rwx -R /root

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@main
        if: env.SSH_ACTIONS == 'true'

      - name: run machine by tail
        if: env.SSH_ACTIONS == 'false'
        run: |
          df -m
          sudo cp $(which echo)  /run/echo
          sudo cp $(which sleep) /run/sleep
          sudo cp $(which df) /run/df
          while true; do /run/sleep 30; df -m /;done
